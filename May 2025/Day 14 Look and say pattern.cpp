/*
Problem Explanation
This code solves the "Look and Say" sequence problem.
Given an integer n, the task is to generate the nth term of the sequence, where:

The first term is "1".
Each subsequent term is generated by describing the previous term as a sequence of counts and digits.
Example:

1st term: "1"
2nd term: "11" (one 1)
3rd term: "21" (two 1s)
4th term: "1211" (one 2, then one 1)
5th term: "111221" (one 1, one 2, two 1s)
The function countAndSay(n) returns the nth term by recursively building each term from the previous one using the helper function
*/
class Solution {
  public:
    string solve(string str, int idx){
      // base case
      if(idx <= 1) return str;
      
      // one case
      string temp = "";
      char ch = str[0];
      int count = 1;
      for(int i=1; i<str.length(); i++){
          if(ch != str[i]){
              temp += to_string(count)+ ch;
              ch = str[i];
              count = 1;
          }else count++;
      }
      
      temp += to_string(count)+ch;
      return solve(temp, idx-1);
  }
    string countAndSay(int n) {
        // code here
        
        if(n == 1) return "1";
        
        string ans = "1";
        return solve(ans, n);
    }
};


/*
Time Complexity
Let L be the length of the nth term.

For each term, the code scans the previous term once (O(L) time).
This is done recursively for each term from 1 to n.
However, the length of each term grows exponentially with n.
So, the overall time complexity is approximately O(2ⁿ), since the length of the sequence roughly doubles each time.

Space Complexity: Also O(2ⁿ), due to the storage of strings in recursion.
*/